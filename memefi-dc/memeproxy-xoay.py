import aiohttp
import asyncio
import json
import random
import string
import time
from datetime import datetime
from urllib.parse import unquote
from utils.headers import headers_set
from utils.query import QUERY_USER, QUERY_LOGIN, MUTATION_GAME_PROCESS_TAPS_BATCH, QUERY_BOOSTER, QUERY_NEXT_BOSS
from utils.query import QUERY_TASK_VERIF, QUERY_TASK_COMPLETED, QUERY_GET_TASK, QUERY_TASK_ID, QUERY_GAME_CONFIG

url = "https://api-gw-tg.memefi.club/graphql"

def generate_random_nonce(length=52):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

def load_proxy(file_path='proxy.txt'):
    with open(file_path, 'r') as file:
        proxy = file.readline().strip()
    return proxy

async def change_ip():
    change_ip_url = "url change ip"
    async with aiohttp.ClientSession() as session:
        async with session.get(change_ip_url) as response:
            if response.status == 200:
                data = await response.json()
                if data['status'] == 0:
                    print("ƒê·ªïi IP th√†nh c√¥ng")
                    return True
                else:
                    print(f"L·ªói khi ƒë·ªïi IP: {data['message']}")
                    return False
            else:
                print(f"L·ªói khi g·ªçi API ƒë·ªïi IP: Tr·∫°ng th√°i {response.status}")
                return False

async def check_ip_proxy(proxy):
    retries = 3  
    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.ipify.org?format=json', proxy=f'{proxy}', timeout=30) as response:
                    if response.status == 200:
                        data = await response.json()
                        ip = data.get('ip', 'Unknown')
                        print(f"ƒê·ªãa ch·ªâ IP m·ªõi: {ip}")
                        return
                    else:
                        print("Kh√¥ng th·ªÉ ki·ªÉm tra ƒë·ªãa ch·ªâ IP m·ªõi.")
        except Exception as e:
            print(f"L·ªói khi ki·ªÉm tra ƒë·ªãa ch·ªâ IP m·ªõi: {e}. Th·ª≠ l·∫°i ({attempt + 1}/{retries})...")
            await asyncio.sleep(5) 
    print("Kh√¥ng th·ªÉ k·∫øt n·ªëi sau nhi·ªÅu l·∫ßn th·ª≠.")
            
async def fetch(account_line, proxy):
    max_retries = 3  
    for attempt in range(max_retries):
        try:
            proxy = load_proxy()  
            if not proxy:
                print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
                continue
        
            with open('query_id.txt', 'r') as file:
                lines = file.readlines()
                raw_data = lines[account_line - 1].strip()

            tg_web_data = unquote(unquote(raw_data))
            query_id = tg_web_data.split('query_id=', maxsplit=1)[1].split('&user', maxsplit=1)[0]
            user_data = tg_web_data.split('user=', maxsplit=1)[1].split('&auth_date', maxsplit=1)[0]
            auth_date = tg_web_data.split('auth_date=', maxsplit=1)[1].split('&hash', maxsplit=1)[0]
            hash_ = tg_web_data.split('hash=', maxsplit=1)[1].split('&', maxsplit=1)[0]

            user_data_dict = json.loads(unquote(user_data))

            url = 'https://api-gw-tg.memefi.club/graphql'
            headers = headers_set.copy()
            data = {
                "operationName": "MutationTelegramUserLogin",
                "variables": {
                    "webAppData": {
                        "auth_date": int(auth_date),
                        "hash": hash_,
                        "query_id": query_id,
                        "checkDataString": f"auth_date={auth_date}\nquery_id={query_id}\nuser={unquote(user_data)}",
                        "user": {
                            "id": user_data_dict["id"],
                            "allows_write_to_pm": user_data_dict["allows_write_to_pm"],
                            "first_name": user_data_dict["first_name"],
                            "last_name": user_data_dict["last_name"],
                            "username": user_data_dict.get("username", "Username kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t"),
                            "language_code": user_data_dict["language_code"],
                            "version": "7.2",
                            "platform": "ios"
                        }
                    }
                },
                "query": QUERY_LOGIN
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data, proxy=proxy) as response:
                    json_response = await response.json()
                    if 'errors' in json_response:
                        print("C√≥ l·ªói trong ph·∫£n h·ªìi. ƒêang th·ª≠ l·∫°i...")
                    else:
                        access_token = json_response['data']['telegramUserLogin']['access_token']
                        return access_token, proxy

        except aiohttp.ServerTimeoutError:
            print("‚ùå M√°y ch·ªß h·∫øt th·ªùi gian ph·∫£n h·ªìi. ƒêang th·ª≠ l·∫°i...")

        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}. ƒêang th·ª≠ l·∫°i...")

        ip_changed = await change_ip() 
        if not ip_changed:
            print("Kh√¥ng th·ªÉ thay ƒë·ªïi IP. ƒêang th·ª≠ l·∫°i v·ªõi IP c≈©...")
        else:
            print("IP ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi. ƒêang ch·ªù 120 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
        await asyncio.sleep(120)  

    print("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i. Chuy·ªÉn sang t√°c v·ª• ti·∫øp theo.")
    return None, None 



async def check_user(index, proxy):
    proxy = load_proxy()
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return None, None
    result = await fetch(index + 1, proxy)
    if not result:
        return None

    access_token, proxy = result

    url = "https://api-gw-tg.memefi.club/graphql"

    headers = headers_set.copy()
    headers['Authorization'] = f'Bearer {access_token}'
    
    json_payload = {
        "operationName": "QueryTelegramUserMe",
        "variables": {},
        "query": QUERY_USER
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_payload, proxy=proxy) as response:
            if response.status == 200:
                response_data = await response.json()
                if 'errors' in response_data:
                    print(f"‚ùå L·ªói Query ID Sai")
                    return None
                else:
                    user_data = response_data['data']['telegramUserMe']
                    return user_data, proxy
            else:
                print(response)
                print(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {response.status}, th·ª≠ l·∫°i...")
                return None

async def activate_energy_recharge_booster(index, headers, proxy):
    proxy = load_proxy() 
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return None, None
    result = await fetch(index + 1, proxy)
    if not result:
        return None

    access_token, proxy = result

    url = "https://api-gw-tg.memefi.club/graphql"

    headers = headers_set.copy()
    headers['Authorization'] = f'Bearer {access_token}'
    
    recharge_booster_payload = {
        "operationName": "telegramGameActivateBooster",
        "variables": {"boosterType": "Recharge"},
        "query": QUERY_BOOSTER
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=recharge_booster_payload, proxy=proxy) as response:
            if response.status == 200:
                response_data = await response.json()
                if response_data and 'data' in response_data and response_data['data'] and 'telegramGameActivateBooster' in response_data['data']:
                    new_energy = response_data['data']['telegramGameActivateBooster']['currentEnergy']
                    print(f"\nN·∫°p nƒÉng l∆∞·ª£ng th√†nh c√¥ng. NƒÉng l∆∞·ª£ng hi·ªán t·∫°i: {new_energy}")
                else:
                    print("‚ùå Kh√¥ng th·ªÉ k√≠ch ho·∫°t Recharge Booster: D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng c√≥.")
            else:
                print(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status}, th·ª≠ l·∫°i...")
                return None 

async def activate_booster(index, headers, proxy):
    proxy = load_proxy()  
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return None, None
    result = await fetch(index + 1, proxy)
    if not result:
        return None

    access_token, _ = result

    url = "https://api-gw-tg.memefi.club/graphql"
    print("\rüöÄ K√≠ch ho·∫°t Turbo Boost... ", end="", flush=True)

    headers = headers_set.copy() 
    headers['Authorization'] = f'Bearer {access_token}'

    recharge_booster_payload = {
        "operationName": "telegramGameActivateBooster",
        "variables": {"boosterType": "Turbo"},
        "query": QUERY_BOOSTER
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=recharge_booster_payload, proxy=proxy) as response:
            if response.status == 200:
                response_data = await response.json()
                current_health = response_data['data']['telegramGameActivateBooster']['currentBoss']['currentHealth']
                if current_health == 0:
                    print("\nBoss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...")
                    await set_next_boss(index, headers, proxy)
                else:
                    total_hit = 3000
                    tap_payload = {
                        "operationName": "MutationGameProcessTapsBatch",
                        "variables": {
                            "payload": {
                                "nonce": generate_random_nonce(),
                                "tapsCount": total_hit
                            }
                        },
                        "query": MUTATION_GAME_PROCESS_TAPS_BATCH
                    }
                    for _ in range(25):
                        tap_result = await submit_taps(index, tap_payload, proxy)
                        if tap_result is not None:
                            if 'data' in tap_result and 'telegramGameProcessTapsBatch' in tap_result['data']:
                                tap_data = tap_result['data']['telegramGameProcessTapsBatch']
                                if tap_data['currentBoss']['currentHealth'] == 0:
                                    print("\nBoss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...")
                                    await set_next_boss(index, headers, proxy)
                                    print(f"\rƒêang tap memefi: {tap_data['coinsAmount']}, Boss ‚öîÔ∏è: {tap_data['currentBoss']['currentHealth']} - {tap_data['currentBoss']['maxHealth']}    ")
                        else:
                            print(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {tap_result}, th·ª≠ l·∫°i...")
                            print(f"URL: {url}")
                            print(f"Headers: {headers}")
                            response_text = await response.text()
                            print(f"Response: {response_text}")
                            
            else:
                print(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status}, th·ª≠ l·∫°i...")
                print(f"URL: {url}")
                print(f"Headers: {headers}")
                print(f"Payload: {json_payload}")

                response_text = await response.text()
                print(f"Response: {response_text}")
                return None 

async def submit_taps(index, json_payload, proxy):
    try:
        proxy = load_proxy()  
        if not proxy:
            print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
            return None, None
        result = await fetch(index + 1, proxy)
        if not result:
            return None

        access_token, _ = result

        headers = headers_set.copy()
        headers['Authorization'] = f'Bearer {access_token}'

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=json_payload, proxy=proxy) as response:
                if response.status == 200:
                    response_data = await response.json()
                    return response_data
                else:
                    print(f"‚ùå Th·∫•t b·∫°i v·ªõi tr·∫°ng th√°i {response}, th·ª≠ l·∫°i...")
                    return None
    except aiohttp.client_exceptions.ServerDisconnectedError as e:
        print(f"L·ªói k·∫øt n·ªëi m√°y ch·ªß: {e}")
        return None 


async def set_next_boss(index, headers, proxy):
    proxy = load_proxy() 
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return None, None
    result = await fetch(index + 1, proxy)
    if not result:
        return None

    access_token, _ = result

    url = "https://api-gw-tg.memefi.club/graphql"

    headers = headers_set.copy()
    headers['Authorization'] = f'Bearer {access_token}'

    json_payload = {
        "operationName": "telegramGameSetNextBoss",
        "variables": {},
        "query": QUERY_NEXT_BOSS
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_payload, proxy=proxy) as response:
            if response.status == 200:
                response_data = await response.json()
                if response_data and 'data' in response_data:
                    print("Boss ti·∫øp theo ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!")
                    return response_data
                else:
                    print("‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t Boss ti·∫øp theo: D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng c√≥.")
                    return None
            else:
                print(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status}, th·ª≠ l·∫°i...")
                print(f"URL: {url}")
                print(f"Headers: {headers}")
                print(f"Payload: {json_payload}")

                response_text = await response.text()
                print(f"Response: {response_text}")
                return None



async def check_stat(index, headers, proxy):
    proxy = load_proxy()  
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return
    result = await fetch(index + 1, proxy)
    if not result:
        return None

    access_token, _ = result

    url = "https://api-gw-tg.memefi.club/graphql"

    headers = headers_set.copy() 
    headers['Authorization'] = f'Bearer {access_token}'
    
    json_payload = {
        "operationName": "QUERY_GAME_CONFIG",
        "variables": {},
        "query": QUERY_GAME_CONFIG
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_payload, proxy=proxy) as response:
            if response.status == 200:
                response_data = await response.json()
                if 'errors' in response_data:
                    return None
                else:
                    user_data = response_data['data']['telegramGameGetConfig']
                    return user_data
            else:
                print(response)
                print(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {response.status}, th·ª≠ l·∫°i...")
                return None
async def main():
    print("B·∫Øt ƒë·∫ßu Memefi bot...")
    print("Ki·ªÉm tra proxy...", end="", flush=True)

    proxy = load_proxy()
    if not proxy:
        print("Kh√¥ng t√¨m th·∫•y proxy h·ª£p l·ªá.")
        return

    print("\nProxy h·ª£p l·ªá. L·∫•y danh s√°ch t√†i kho·∫£n...")
    
    while True:

        with open('query_id.txt', 'r') as file:
            account_lines = file.readlines()
            
            accounts = []


            for index, line in enumerate(account_lines):
                result, proxy = await check_user(index, proxy)
                if result is not None:
                    first_name = result.get('firstName', 'Unknown')
                    last_name = result.get('lastName', 'Unknown')
                    accounts.append((index, result, first_name, last_name, proxy))
                else:
                    print(f"‚ùå T√†i kho·∫£n {index + 1}: Token kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói x·∫£y ra")

            print("\rDanh s√°ch t√†i kho·∫£n:", flush=True)
            for index, _, first_name, last_name, proxy in accounts:
                print(f"‚úÖ [ T√†i kho·∫£n {first_name} {last_name} ] | Proxy ho·∫°t ƒë·ªông.")

            for index, result, first_name, last_name, proxy in accounts:
                ip_changed = await change_ip()
                if not ip_changed:
                    print(f"Kh√¥ng th·ªÉ ƒë·ªïi IP cho t√†i kho·∫£n th·ª© {index + 1}. Ti·∫øp t·ª•c v·ªõi IP hi·ªán t·∫°i.")
                else:
                    print("ƒê·ªïi IP th√†nh c√¥ng, ch·ªù 10 gi√¢y ƒë·ªÉ ki·ªÉm tra ƒë·ªãa ch·ªâ IP m·ªõi:")
                await asyncio.sleep(10)
                await check_ip_proxy(proxy)
            
                print("Ch·ªù 120 gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c...")
                await asyncio.sleep(120)
                headers = {'Authorization': f'Bearer {result}'}
                should_continue_to_next_account = False
                stat_result = await check_stat(index, headers, proxy)

                if stat_result is not None:
                    user_data = stat_result
                    output = (
                        f"[ T√†i kho·∫£n {index + 1} - {first_name} {last_name} ]\n"
                        f"Balance üíé {user_data.get('coinsAmount', 'Unknown')} NƒÉng l∆∞·ª£ng : {user_data.get('currentEnergy', 'Unknown')} / {user_data.get('maxEnergy', 'Unknown')}\n"
                        f"Boss LV {user_data['currentBoss'].get('level', 'Unknown')} ‚ù§Ô∏è  {user_data['currentBoss'].get('currentHealth', 'Unknown')} - {user_data['currentBoss'].get('maxHealth', 'Unknown')}\n"
                        f"Turbo {user_data['freeBoosts'].get('currentTurboAmount', 'Unknown')} Recharge {user_data['freeBoosts'].get('currentRefillEnergyAmount', 'Unknown')}\n"
                    )
                else:
                    print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu ng∆∞·ªùi d√πng cho t√†i kho·∫£n {index}. Chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.")
                    continue
                print(output, end="", flush=True)
                if 'currentBoss' in user_data:
                    lv_boss = user_data['currentBoss']['level']
                    mau_boss = user_data['currentBoss']['currentHealth']
                    if lv_boss == 11 and mau_boss == 0:
                        print(f"\n=================== {first_name} {last_name} K·∫æT TH√öC ====================")
                        should_continue_to_next_account = True
                    if mau_boss == 0:
                        print("\nBoss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...", flush=True)
                        await set_next_boss(index, headers, proxy)
                print("\rB·∫Øt ƒë·∫ßu tap\n", end="", flush=True)
            

                energy_now = user_data['currentEnergy']
                recharge_available = user_data['freeBoosts']['currentRefillEnergyAmount']
                if not should_continue_to_next_account:
                    while energy_now > 500 or recharge_available > 0:
                        total_tap = random.randint(100, 200)
                        tap_payload = {
                            "operationName": "MutationGameProcessTapsBatch",
                            "variables": {
                                "payload": {
                                    "nonce": generate_random_nonce(),
                                    "tapsCount": total_tap
                                }
                            },
                            "query": MUTATION_GAME_PROCESS_TAPS_BATCH
                        }

                        tap_result = await submit_taps(index, tap_payload, proxy)
                        if tap_result is not None:
                            user_data = await check_stat(index, headers, proxy)
                            energy_now = user_data['currentEnergy']
                            recharge_available = user_data['freeBoosts']['currentRefillEnergyAmount']
                            print(f"\rƒêang tap Memefi : Balance üíé {user_data['coinsAmount']} NƒÉng l∆∞·ª£ng : {energy_now} / {user_data['maxEnergy']}\n")
                        else:
                            print(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {tap_result}, th·ª≠ l·∫°i...")

                        if energy_now < 500:
                            if recharge_available > 0:
                                print("\rH·∫øt nƒÉng l∆∞·ª£ng, k√≠ch ho·∫°t Recharge... \n", end="", flush=True)
                                await activate_energy_recharge_booster(index, headers, proxy)
                                user_data = await check_stat(index, headers, proxy)
                                energy_now = user_data['currentEnergy']
                                recharge_available = user_data['freeBoosts']['currentRefillEnergyAmount']
                            else:
                                print("NƒÉng l∆∞·ª£ng d∆∞·ªõi 500 v√† kh√¥ng c√≤n Recharge, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.")
                                break

                        if user_data['freeBoosts']['currentTurboAmount'] > 0:
                            await activate_booster(index, headers, proxy)
                if should_continue_to_next_account:
                    continue
        print("=== [ T·∫§T C·∫¢ T√ÄI KHO·∫¢N ƒê√É ƒê∆Ø·ª¢C X·ª¨ L√ù ] ===")
        animate_energy_recharge(600)

def animate_energy_recharge(duration):
    frames = ["|", "/", "-", "\\"]
    end_time = time.time() + duration
    while time.time() < end_time:
        remaining_time = int(end_time - time.time())
        for frame in frames:
            print(f"\rƒêang n·∫°p l·∫°i nƒÉng l∆∞·ª£ng {frame} - C√≤n l·∫°i {remaining_time} gi√¢y", end="", flush=True)
            time.sleep(0.25)
    print("\rN·∫°p nƒÉng l∆∞·ª£ng ho√†n th√†nh.\n", flush=True)

asyncio.run(main())